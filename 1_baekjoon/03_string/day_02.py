# %%
# 문제 1
# 코딩은 체육과목 입니다

# 오늘은 혜아의 면접 날이다. 면접 준비를 열심히 해서 앞선 질문들을 잘 대답한 혜아는 이제 마지막으로 칠판에 직접 코딩하는 문제를 받았다.
# 혜아가 받은 문제는 두 수를 더하는 문제였다. C++ 책을 열심히 읽었던 혜아는 간단히 두 수를 더하는 코드를 칠판에 적었다.
# 코드를 본 면접관은 다음 질문을 했다. “만약, 입출력이
# $N$바이트 크기의 정수라면 프로그램을 어떻게 구현해야 할까요?”

# 혜아는 책에 있는 정수 자료형과 관련된 내용을 기억해 냈다.
# 책에는 long int는 4 바이트 정수까지 저장할 수 있는 정수 자료형이고
# long long int는 8 바이트 정수까지 저장할 수 있는 정수 자료형이라고 적혀 있었다.
# 혜아는 이런 생각이 들었다. “int 앞에 long을 하나씩 더 붙일 때마다 4 바이트씩 저장할 수 있는 공간이 늘어나는 걸까?
# 분명 long long long int는 12 바이트,
# long long long long int는 16 바이트까지 저장할 수 있는 정수 자료형일 거야!”
# 그렇게 혜아는 당황하는 면접관의 얼굴을 뒤로한 채 칠판에 정수 자료형을 써 내려가기 시작했다.

# 혜아가
# N 바이트 정수까지 저장할 수 있다고 생각해서 칠판에 쓴 정수 자료형의 이름은 무엇일까?

# 입력
# 첫 번째 줄에는 문제의 정수 N 이 주어진다 (N 은 4의 배수)

# 출력
# 혜아가
# N 바이트 정수까지 저장할 수 있다고 생각하는 정수 자료형의 이름을 출력하여라.

# 예제 입력 1
# 4
# 예제 출력 1
# long int

# 예제 입력 2
# 20
# 예제 출력 2
# long long long long long int

# 노트
# 출력에서 long과 long, long과 int 사이에는 공백이 하나씩 들어간다.
# 실제로 C++에서 각 정수 자료형이 저장할 수 있는 수의 크기는 환경에 따라 달라질 수 있다.
# 덧붙여, 실제로 문제 내용과 같이 long long long int와 같은 자료형을 사용한 코드를 GCC의 C++ 컴파일러를 사용해 컴파일하려고 할 경우
# 'long long long' is too long for GCC라는 에러 메시지와 함께 컴파일되지 않는다.

# 4 바이트 long int
# 8 바이트 long long int
# 12 바이트 long long long int3

# 16 바이트 long long long long int

# N = int(input())

# result = ""

# for i in range(N):
#     result += " long"

# print(result + " int")


for _ in range(int(input())//4):
    print("long", end=" ")

print("int")


# %%

# 문제 2
# Java 예찬론자 김동규와 C++ 옹호가 김동혁은 서로 어떤 프로그래밍 언어가 최고인지 몇 시간동안 토론을 하곤 했다.
# 동규는 Java가 명확하고 에러가 적은 프로그램을 만든다고 주장했고, 동혁이는 Java는 프로그램이 느리고,
# 긴 소스 코드를 갖는 점과 제네릭 배열의 인스턴스화의 무능력을 비웃었다.
# 또, 김동규와 김동혁은 변수 이름을 짓는 방식도 서로 달랐다. Java에서는 변수의 이름이 여러 단어로 이루어져있을 때,
# 다음과 같은 방법으로 변수명을 짓는다.

# 첫 단어는 소문자로 쓰고, 다음 단어부터는 첫 문자만 대문자로 쓴다.
# 또, 모든 단어는 붙여쓴다. 따라서 Java의 변수명은 javaIdentifier, longAndMnemonicIdentifier, name, bAEKJOON과 같은 형태이다.

# 반면에 C++에서는 변수명에 소문자만 사용한다. 단어와 단어를 구분하기 위해서 밑줄('_')을 이용한다.
# C++ 변수명은 c_identifier, long_and_mnemonic_identifier, name, b_a_e_k_j_o_o_n과 같은 형태이다.

# 이 둘의 싸움을 부질없다고 느낀 재원이는 C++형식의 변수명을 Java형식의 변수명으로, 또는 그 반대로 바꿔주는 프로그램을 만들려고 한다.
# 각 언어의 변수명 형식의 위의 설명을 따라야 한다.
# 재원이의 프로그램은 가장 먼저 변수명을 입력으로 받은 뒤, 이 변수명이 어떤 언어 형식인지를 알아내야 한다.
# 그 다음, C++형식이라면 Java형식으로, Java형식이라면 C++형식으로 바꾸면 된다. 만약 C++형식과 Java형식 둘 다 아니라면, 에러를 발생시킨다.
# 변수명을 변환할 때, 단어의 순서는 유지되어야 한다.
# 재원이는 프로그램을 만들려고 했으나, 너무 귀찮은 나머지 이를 문제를 읽는 사람의 몫으로 맡겨놨다.
# 재원이가 만들려고 한 프로그램을 대신 만들어보자.

# 입력
# 첫째 줄에 변수명이 주어진다. 영어 알파벳과 밑줄('_')로만 이루어져 있고, 길이는 100을 넘지 않는다.

# 출력
# 입력으로 주어진 변수명이 Java형식이면, C++형식으로 출력하고, C++형식이라면 Java형식으로 출력한다. 둘 다 아니라면 "Error!"를 출력한다.

# 예제 입력 1
# long_and_mnemonic_identifier # c
# 예제 출력 1
# longAndMnemonicIdentifier # java

# 출력형식 변경 해주는 함수 작성

# c or java 구분
# _ 있으면 c // 대문자가 있으면 java

# java --> c
# 대문자를 소문자로 바꿔주고 대문자 앞에 _ 추가

# c --> java
# _ 앞에 소문자를 대문자로 바꾸고 _ 삭제


# 1. if 문으로 c or java 구분
# 2. if else 로 java -> c 또는 c -> java 로 변경
