# %%

# 문제 1
# 세준이는 영어로만 이루어진 어떤 문서를 검색하는 함수를 만들려고 한다.
# 이 함수는 어떤 단어가 총 몇 번 등장하는지 세려고 한다. 그러나, 세준이의 함수는 중복되어 세는 것은 빼고 세야 한다.
# 예를 들어, 문서가 abababa이고, 그리고 찾으려는 단어가 ababa라면, 세준이의 이 함수는 이 단어를 0번부터 찾을 수 있고, 2
# 번부터도 찾을 수 있다. 그러나 동시에 셀 수는 없다.

# 세준이는 문서와 검색하려는 단어가 주어졌을 때, 그 단어가 최대 몇 번 중복되지 않게 등장하는지 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 문서가 주어진다. 문서의 길이는 최대 2500이다. 둘째 줄에 검색하고 싶은 단어가 주어진다. 이 길이는 최대 50이다.
# 문서와 단어는 알파벳 소문자와 공백으로 이루어져 있다.

# 출력
# 첫째 줄에 중복되지 않게 최대 몇 번 등장하는지 출력한다.

# 예제 입력 1
# ababababa
# aba
# 예제 출력 1
# 2

# 예제 입력 2
# a a a a a
# a a
# 예제 출력 2
# 2

# 예제 입력 3
# ababababa
# ababa
# 예제 출력 3
# 1

# 예제 입력 4
# aaaaaaa
# aa
# 예제 출력 4
# 3

word = input()
small = input()
sp_word = word.split(small)

print(len(sp_word) - 1)

# %%

# 문제 2
# 예전에는 운영체제에서 크로아티아 알파벳을 입력할 수가 없었다. 따라서, 다음과 같이 크로아티아 알파벳을 변경해서 입력했다.

# 크로아티아 알파벳	변경
# č	    c=
# ć	    c-
# dž	dz=
# đ	    d-
# lj	lj
# nj	nj
# š	    s=
# ž	    z=
# 예를 들어, ljes=njak은 크로아티아 알파벳 6개(lj, e, š, nj, a, k)로 이루어져 있다. 단어가 주어졌을 때,
# 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.

# dž는 무조건 하나의 알파벳으로 쓰이고, d와 ž가 분리된 것으로 보지 않는다. lj와 nj도 마찬가지이다. 위 목록에 없는 알파벳은 한 글자씩 센다.

# 입력
# 첫째 줄에 최대 100글자의 단어가 주어진다. 알파벳 소문자와 '-', '='로만 이루어져 있다.

# 단어는 크로아티아 알파벳으로 이루어져 있다. 문제 설명의 표에 나와있는 알파벳은 변경된 형태로 입력된다.

# 출력
# 입력으로 주어진 단어가 몇 개의 크로아티아 알파벳으로 이루어져 있는지 출력한다.

# 예제 입력 1
# lj e s= nj a k
# 예제 출력 1
# 6

# 예제 입력 2
# d dz= z=
# 예제 출력 2
# 3

word = input()
croatia = ["c=", "c-", "dz=", "d-", "lj", "nj", "s=", "z="]

for i in croatia:
    word = word.replace(i, '*')

print(len(word))

# %%

# 3
# 선영이는 이번 학기에 오스트레일리아로 교환 학생을 가게 되었다.
# 호주에 도착하고 처음 며칠은 한국 생각을 잊으면서 즐겁게 지냈다. 몇 주가 지나니 한국이 그리워지기 시작했다.
# 선영이는 한국에 두고온 서버에 접속해서 디렉토리 안에 들어있는 파일 이름을 보면서 그리움을 잊기로 했다.
# 매일 밤, 파일 이름을 보면서 파일 하나하나에 얽힌 사연을 기억하면서 한국을 생각하고 있었다.

# 어느 날이었다. 한국에 있는 서버가 망가졌고, 그 결과 특정 패턴과 일치하는 파일 이름을 적절히 출력하지 못하는 버그가 생겼다.

# 패턴은 알파벳 소문자 여러 개와 별표(*) 하나로 이루어진 문자열이다.
# 파일 이름이 패턴에 일치하려면, 패턴에 있는 별표를 알파벳 소문자로 이루어진 임의의 문자열로 변환해 파일 이름과 같게 만들 수 있어야 한다.
# 별표는 빈 문자열로 바꿀 수도 있다. 예를 들어, "abcd", "ad", "anestonestod"는 모두 패턴 "a*d"와 일치한다. 하지만, "bcd"는 일치하지 않는다.
# 패턴과 파일 이름이 모두 주어졌을 때, 각각의 파일 이름이 패턴과 일치하는지 아닌지를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 파일의 개수 N이 주어진다. (1 ≤ N ≤ 100)

# 둘째 줄에는 패턴이 주어진다. 패턴은 알파벳 소문자와 별표(아스키값 42) 한 개로 이루어져 있다.
# 문자열의 길이는 100을 넘지 않으며, 별표는 문자열의 시작과 끝에 있지 않다.

# 다음 N개 줄에는 파일 이름이 주어진다. 파일 이름은 알파벳 소문자로만 이루어져 있고, 길이는 100을 넘지 않는다.

# 출력
# 총 N개의 줄에 걸쳐서, 입력으로 주어진 i번째 파일 이름이 패턴과 일치하면 "DA", 일치하지 않으면 "NE"를 출력한다.

# 참고로, "DA"는 크로아티어어로 "YES"를, "NE"는 "NO"를 의미한다.

# 예제 입력 1
# 3
# a*d
# abcd
# anestonestod
# facebook
# 예제 출력 1
# DA
# DA
# NE

# 예제 입력 2
# 6
# h*n
# huhovdjestvarnomozedocisvastan
# honijezakon
# atila
# je
# bio
# hun
# 예제 출력 2
# DA
# DA
# NE
# NE
# NE
# DA

# 파일 갯수 n
# 패턴

# 일치하면 DA
# 일치하지 않으면 NE

# abc*def 와 같이 여러개가  나오는 경우

n = int(input())
pattern = input().split("*")
length = len(pattern[0]) + len(pattern[1])

for _ in range(n):
    file = input()
    if length > len(file):
        print("NE")

    else:
        if pattern[0] == file[:len(pattern[0])] and pattern[1] == file[-len(pattern[1]):]:
            print("DA")
        else:
            print("NE")


# %%
